// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("NEON_CONNECTION_STRING")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./database/database.db"
// }

model Organization {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  name         String
  industryType String
  address      String
  telephone    String
  email        String       @unique
  password     String
  users        Users[]
  maximumUsers Int
  departments  Department[]
}

model Department {
  id             String               @id @default(uuid())
  name           String
  users          UsersOnDepartments[]
  organization   Organization         @relation(fields: [organizationId], references: [id])
  organizationId String
}

model Users {
  id             String               @id @default(uuid())
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  name           String
  email          String               @unique
  password       String
  isManager      Boolean
  tasks          Task[]
  organization   Organization?        @relation(fields: [organizationId], references: [id])
  organizationId String
  departments    UsersOnDepartments[]
}

model UsersOnDepartments {
  user         Users      @relation(fields: [userId], references: [id])
  userId       String
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String

  @@id([userId, departmentId]) // composite primary key
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String
  assignedOn  DateTime @default(now())
  dueDate     DateTime

  // Many-to-many relation with users
  assignedTo  Users    @relation(fields: [userId], references: [id])
  userId      String
  completed   Boolean
  completedOn DateTime?
}
