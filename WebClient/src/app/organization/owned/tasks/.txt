import { OwnedOrganizationSidebar } from "@/components/layout";
import { Plus } from "lucide-react";

import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  // AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import toast from "react-hot-toast";
import axios from "axios";

// import {
//   ContextMenu,
//   ContextMenuContent,
//   ContextMenuItem,
//   ContextMenuTrigger,
// } from "@/components/ui/context-menu"

const Tasks = () => {
  const handleTaskCreation = async () => {
    try {
      const response = await axios.post("/api/tasks/create");
    } catch (err) {
      toast.error("An error occured while assigning task");
    }
  };

  return (
    <AlertDialog>
      <main className="relative flex h-screen bg-white">
        <OwnedOrganizationSidebar />
        <section className="flex-1 h-screen overflow-y-auto p-10 max-sm:px-5 max-sm:py-7">
          <div className="flex flex-row flex-nowrap justify-between items-center mb-6">
            <h1 className="text-2xl font-bold text-gray-800">Tasks Assigned</h1>

            <AlertDialogTrigger className="bg-gray-900 cursor-pointer px-[10px] text-sm py-[5px] rounded-md text-white flex flex-row flex-nowrap justify-start items-center gap-[3px]">
              <Plus className="size-sm" />
              <span>Create</span>
            </AlertDialogTrigger>

            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
              </AlertDialogHeader>

              <form className="flex flex-col gap-[10px]">
                {/* title ... */}
                <label htmlFor="title" className="font-semibold text-sm">
                  Title :
                </label>
                <input
                  type="text"
                  name="title"
                  id="title"
                  placeholder="Title"
                  className="placeholder:text-sm py-[4px] px-[15px] rounded-md w-full"
                />
                {/* description ... */}
                <label htmlFor="description" className="font-semibold text-sm">
                  Description :
                </label>
                <textarea
                  name="description"
                  id="description"
                  className="placeholder:text-sm py-[4px] px-[15px] h-[100px] rounded-md w-full"
                  placeholder="Description"
                ></textarea>

                {/*  assigned to  ... */}
                <label
                  htmlFor="Assigned this task to"
                  className="font-semibold text-sm"
                >
                  Assigned to :
                </label>
                <select
                  className="placeholder:text-sm py-[4px] px-[15px] rounded-md w-full"
                  name="employees"
                  id="employees"
                  // onChange={() => {
                  // setnewTask({ ...newTask, userId: e.target.value })
                  // }}
                >
                  {/* {
                    users.map((employee, idx) => (
                      <option value={employee.id} key={idx}>{employee.name}</option>
                    ))
                  } */}
                </select>
                {/* description ... */}
                <label
                  htmlFor="Due date for this task"
                  className="font-semibold text-sm"
                >
                  Due date :
                </label>
                <input
                  type="datetime-local"
                  name="dueDate"
                  id="due-date"
                  className="py-[4px] px-[15px] rounded-md w-full"
                  // onChange={() => {
                  // setnewTask({ ...newTask, dueDate: new Date(e.target.value) })
                  // }}
                />
              </form>
              <AlertDialogFooter>
                <AlertDialogCancel>Cancel</AlertDialogCancel>
                <AlertDialogAction className="bg-gray-900 cursor-pointer px-[10px] text-sm py-[5px] rounded-md text-white flex flex-row flex-nowrap justify-start items-center gap-[3px]">
                  <Plus className="size-sm" />
                  <span>Create</span>
                </AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </div>
          {/* 
          <div className="flex flex-row flex-wrap gap-6">
            {tasks.length <= 0 ? <p className="text-gray-400">No tasks found ...</p> : tasks.map((task: Task, idx) => (
              <ContextMenu key={idx}>
                <ContextMenuTrigger>
                  <Card task={task} />
                </ContextMenuTrigger>
                <ContextMenuContent>
                  <ContextMenuItem>Edit</ContextMenuItem>
                  <ContextMenuItem onClick={() => handleDeleteTask(task.id)}>Delete</ContextMenuItem>
                </ContextMenuContent>
              </ContextMenu>

            ))}
          </div> */}
        </section>
      </main>
    </AlertDialog>
  );
};

export default Tasks;