// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Accounts {
  id                 String         @id @default(uuid())
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  name               String
  email              String         @unique
  password           String
  organizations      Organization[]
  departments        Department[]   @relation("DepartmentMembers")
  plan               Plan           @default(FREE)
  stripeCustomerId   String?        @unique
  stripeSubId        String?        @unique
  tasks              Task[]
  notifications      Notification[]
  managedDepartments Department[]
  Invite             Invite[]
}

model Organization {
  id                   String       @id @default(uuid())
  createdAt            DateTime     @default(now())
  name                 String
  organizationEmail    String       @unique
  organizationPassword String
  manager              Accounts     @relation(fields: [userId], references: [id])
  userId               String
  departments          Department[]
  tasks                Task[]
}

// attach notify on update
model Department {
  id             String       @id @default(uuid())
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  users          Accounts[]   @relation("DepartmentMembers")
  manager        Accounts?    @relation(fields: [managerId], references: [id])
  managerId      String?
  invites        Invite[] // ðŸ‘ˆ changed from single to array
}

// attach notify on insert , update
model Task {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  account        Accounts     @relation(fields: [assignedTo], references: [id])
  assignedTo     String

  title       String
  description String
  assignedOn  DateTime @default(now())
  dueDate     DateTime
  // Many-to-many relation with users

  completed   Boolean
  completedOn DateTime?
  note        String    @default("No note found ...")
}

// attach notify on insert
model Notification {
  id        String           @id @default(uuid())
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user   Accounts @relation(fields: [userId], references: [id])
  userId String
}

model Invite {
  id                String       @id @default(uuid())
  organizationEmail String
  inviteeEmail      String
  token             String       @unique
  expiresAt         DateTime
  status            InviteStatus @default(PENDING)

  // Relations
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String

  // Optional: who accepted the invite
  acceptedBy   Accounts? @relation(fields: [acceptedById], references: [id])
  acceptedById String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InviteStatus {
  PENDING // sent, waiting for response
  ACCEPTED // user joined successfully
  EXPIRED // link expired
  REVOKED // manually revoked by org/admin
}

enum NotificationType {
  SUCCESS
  FAILURE
}

enum Plan {
  FREE
  TEAMS
  PRO
}
